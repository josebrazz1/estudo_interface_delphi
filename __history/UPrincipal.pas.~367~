unit UPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls;

type
  TFormPrincipal = class(TForm)
    Button1: TButton;
    txtNomeJogo: TEdit;
    txtDtLancamento: TEdit;
    txtGenero: TEdit;
    txtDesenvolvedor: TEdit;
    procedure FormCreate(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure AdicionarNovoJogo(pNome, pDtLancamento, pGenero, pDesenvolvedor : String);
    procedure AdicionarNovoDispositivo;
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  FormPrincipal: TFormPrincipal;

implementation

{$R *.dfm}

uses UJogoInterfaces, UJogoClasses;

procedure TFormPrincipal.Button1Click(Sender: TObject);
begin
  AdicionarNovoJogo(txtNomeJogo.Text,
    txtDtLancamento.Text,
    txtGenero.Text,
    txtDesenvolvedor.Text);
end;

procedure TFormPrincipal.FormCreate(Sender: TObject);
begin
  {Habilita a opção de mostrar se houveram vazamentos de memória ao decorrer da
  execução do programa}
  ReportMemoryLeaksOnShutdown := True;
end;

procedure TFormPrincipal.AdicionarNovoJogo(pNome,
  pDtLancamento, pGenero, pDesenvolvedor : String);
var
  jogo : IJogo;
  genero : IGenero;
  desenvolvedor : IDesenvolvedor;

  flLinha, flConteudo, flPrimeiraLinha : String;

  strList : TStringList;

  fl : TextFile;

  i : Integer;
begin
  {Cria os InterfacedObjects na memória, os quais não precisam ser destruídos.

  Obs: Todos as classes que herdam de TInterfacedObject são liberados automaticamente}
  jogo := TJogo.Create;
  genero := TGenero.Create;
  desenvolvedor := TDesenvolvedor.Create;

  {Instancia a StringList}
  strList := TStringList.Create;

  {alimenta os objetos}
  jogo.Nome := pNome;
  jogo.DataLancamento := pDtLancamento;

  jogo.Genero := genero;
  jogo.Genero.Nome := pGenero;

  jogo.Desenvolvedor := desenvolvedor;
  jogo.Desenvolvedor.Nome := pDesenvolvedor;

  {Mensagem informando as descrições que foram guardadas em arquivo}
  ShowMessage(jogo.Nome + #13#10 +
              jogo.DataLancamento + #13#10 +
              jogo.Genero.Nome + #13#10 +
              jogo.Desenvolvedor.Nome);

  {adiciona os valores dos Edit's à StringList}
  strList.Add(jogo.Nome);
  strList.Add(jogo.DataLancamento);
  strList.Add(jogo.Genero.Nome);
  strList.Add(jogo.Desenvolvedor.Nome);

  try
    {Checa se o arquivo existe}
    if FileExists(ExtractFilePath(ParamStr(0)) + '\' + 'games.txt') then
    begin
      {Se sim, o atribui à variável "fl"}
      AssignFile(fl, ExtractFilePath(ParamStr(0)) + '\' + 'games.txt');
      {abre o arquivo para edição no final}
      Append(fl);

      {Adiciona o separador}
      Writeln(fl, '----------------------------------------------------------------');

      {Escreve cada item da StringList no arquivo}
      for i := 0 to strList.Count - 1 do
        Writeln(fl, strList.Strings[i]);

      {Após terminar a escrita, fecha o arquivo}
      CloseFile(fl);
    end
    else
      {Se o arquivo não existir, o cria no local onde o executável do programa está}
      strList.SaveToFile(ExtractFilePath(ParamStr(0)) + '\' + 'games.txt');
  finally
    FreeAndNil(strList);
  end;

  {Libera a StringList da memória}
  FreeAndNil(strList);
end;

procedure TFormPrincipal.AdicionarNovoDispositivo;
begin
  ShowMessage('');
end;

end.
